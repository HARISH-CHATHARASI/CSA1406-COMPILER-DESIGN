#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX 10

char productions[MAX][MAX];
char first[MAX][MAX];
char follow[MAX][MAX];
char non_terminals[MAX];
int num_productions;

// Function to add a symbol to a string (used for FIRST and FOLLOW sets)
void addSymbol(char *str, char symbol) {
    if (!strchr(str, symbol)) {
        strncat(str, &symbol, 1);
    }
}

// Function to find FIRST set of a symbol
void findFirst(char symbol, char result[]) {
    // If symbol is terminal, add it to the result
    if (!isupper(symbol)) {
        addSymbol(result, symbol);
        return;
    }

    // If FIRST set already computed, return
    if (first[symbol - 'A'][0] != '\0') {
        strcat(result, first[symbol - 'A']);
        return;
    }

    // Compute FIRST set by iterating over the productions
    for (int i = 0; i < num_productions; i++) {
        if (productions[i][0] == symbol) {
            int j = 2; // Skip the left-hand side (non-terminal)
            while (productions[i][j] != '\0') {
                // If terminal, add to result
                if (!isupper(productions[i][j])) {
                    addSymbol(result, productions[i][j]);
                    break;
                }
                // If non-terminal, call findFirst recursively
                findFirst(productions[i][j], result);
                // If epsilon is in the FIRST set of the current symbol, continue
                if (strchr(result, 'e')) {
                    result[strlen(result) - 1] = '\0';  // Remove 'e' temporarily
                } else {
                    break;
                }
                j++;
            }
        }
    }
}

// Function to compute FOLLOW set of a symbol
void addFollow(char symbol, char result[]) {
    // If symbol is the start symbol, add '$' (end of input marker)
    if (symbol == productions[0][0]) {
        addSymbol(result, '$');
    }

    // Iterate over all productions
    for (int i = 0; i < num_productions; i++) {
        for (int j = 2; productions[i][j] != '\0'; j++) {
            if (productions[i][j] == symbol) {
                // If there's a symbol after the current symbol
                if (productions[i][j + 1] != '\0') {
                    char firstResult[MAX] = "";
                    findFirst(productions[i][j + 1], firstResult);
                    // Add FIRST of the next symbol to FOLLOW
                    for (int k = 0; firstResult[k] != '\0'; k++) {
                        if (firstResult[k] != 'e') {
                            addSymbol(result, firstResult[k]);
                        }
                    }
                    // If e is in the FIRST set, propagate FOLLOW of the left-hand side
                    if (strchr(firstResult, 'e')) {
                        addFollow(productions[i][0], result);
                    }
                }
                // If no symbol follows, propagate FOLLOW of the left-hand side
                else if (productions[i][0] != symbol) {
                    addFollow(productions[i][0], result);
                }
            }
        }
    }
}

// Function to remove duplicates from the result string
void removeDuplicates(char *str) {
    int index = 0;
    for (int i = 0; i < strlen(str); i++) {
        if (!strchr(str + i + 1, str[i])) {
            str[index++] = str[i];
        }
    }
    str[index] = '\0';
}

int main() {
    printf("Enter the number of productions: ");
    scanf("%d", &num_productions);

    printf("Enter the productions (e.g., S->AB):\n");
    for (int i = 0; i < num_productions; i++) {
        scanf("%s", productions[i]);
        non_terminals[i] = productions[i][0]; // The first character is the non-terminal
    }

    // Initialize the FIRST and FOLLOW sets
    for (int i = 0; i < num_productions; i++) {
        first[i][0] = '\0';
        follow[i][0] = '\0';
    }

    // Find FIRST sets
    for (int i = 0; i < num_productions; i++) {
        char result[MAX] = "";
        findFirst(productions[i][0], result);
        strcpy(first[productions[i][0] - 'A'], result);
    }

    // Find FOLLOW sets
    for (int i = 0; i < num_productions; i++) {
        char result[MAX] = "";
        addFollow(productions[i][0], result);
        removeDuplicates(result);
        strcpy(follow[productions[i][0] - 'A'], result);
    }

    // Display the FIRST and FOLLOW sets
    printf("\nFIRST and FOLLOW Sets:\n");
    for (int i = 0; i < num_productions; i++) {
        printf("FIRST(%c) = { %s }\n", non_terminals[i], first[non_terminals[i] - 'A']);
        printf("FOLLOW(%c) = { %s }\n", non_terminals[i], follow[non_terminals[i] - 'A']);
    }

    return 0;
}
